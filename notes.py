import os
import re
from idlelib.replace import replace

from jupiter import ask_jupiter  # –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥—É–ª—å
from fuzzywuzzy import process
import subprocess
import time


NOTES_DIR = "notes"

SYSTEM_PROMPT_NOTE = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é Markdown-–∑–∞–º–µ—Ç–∫—É. "
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç, —Ç–æ —Ä–∞—Å–ø–∏—Å—ã–≤–∞–π –ø–æ–¥—Ä–æ–±–Ω–µ–µ –µ—ë, –æ—Ç –ª–∏—à–Ω–∏—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–µ –±—É–¥–µ—Ç –≤—Ä–µ–¥–∞."
    "–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –û–ë–Ø–ó–ê–ù–ê –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å–æ —Å–ª–æ–≤: `–ó–∞–º–µ—Ç–∫–∞: \"<–∏–º—è>\"`. <–∏–º—è> –û–ë–Ø–ó–ê–ù–û –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º."
    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª —Ç–µ–≥–∏, –¥–æ–±–∞–≤—å –∏—Ö –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–¢–µ–≥–∏: <—Å–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤>`. "
    "–ù–ï –¥–æ–±–∞–≤–ª—è–π —Ç–µ–≥–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–°–æ—Ö—Ä–∞–Ω—è–π Markdown-—Å—Ç—Ä—É–∫—Ç—É—Ä—É: –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –æ—Å–≤–µ–∂–∏—Ç—å –∑–∞–º–µ—Ç–∫—É(–ö–†–û–ú–ï –ù–ê–ó–í–ê–ù–ò–Ø –ò –¢–ï–ì–û–í. –¢–∞–º –Ω–µ–ª—å–∑—è)"
)
SYSTEM_PROMPT_UPDATE_NOTE = (
    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–µ–¥–µ–Ω–∏—é –∑–∞–º–µ—Ç–æ–∫. –°–µ–π—á–∞—Å —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–º–µ—Ç–∫–∞. "
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ—ë –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è—è Markdown-—Ñ–æ—Ä–º–∞—Ç. "
    "–ù–ï —É–¥–∞–ª—è–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—à–∏—Ä—å –µ–≥–æ. –î–æ–±–∞–≤–ª—è–π –Ω–æ–≤—ã–µ –ø—É–Ω–∫—Ç—ã –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."
)

SHORT_PROMPT = (
    "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑. "
    "–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Å—É—Ç—å –∏ –ø–µ—Ä–µ–¥–∞–π –µ—ë –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º, –∫–∞–∫ –µ—Å–ª–∏ –±—ã –æ–±—ä—è—Å–Ω—è–ª —á–µ–ª–æ–≤–µ–∫—É. "
    "–ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–æ—Å—Ç–æ —É—Ç–æ—á–Ω–∏ –µ–≥–æ —Å—É—Ç—å. –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: '–í—ã –∑–∞–ø–∏—Å–∞–ª–∏...' –∏–ª–∏ '–í –∑–∞–º–µ—Ç–∫–µ –≥–æ–≤–æ—Ä–∏—Ç—Å—è...' "
    "–ü–µ—Ä–µ—Å–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º, –Ω–æ –Ω–µ –¥–ª–∏–Ω–Ω—ã–º."
)


def generate_note(user_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–º–ø—Ç –≤ `jupiter.py`, –ø–æ–ª—É—á–∞–µ—Ç Markdown-–∑–∞–º–µ—Ç–∫—É"""
    messages = [
        {"role": "system", "content": SYSTEM_PROMPT_NOTE},
        {"role": "user", "content": user_text}
    ]
    return ask_jupiter(SYSTEM_PROMPT_NOTE + "\n–í–æ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + user_text)  # üöÄ –ó–∞–ø—Ä–æ—Å –≤ AI

import os
from fuzzywuzzy import process
from jupiter import ask_jupiter

NOTES_DIR = "notes"

def update_note(user_text):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–∞–º–µ—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ AI –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    if not note_files:
        return "‚ùå –í –ø–∞–ø–∫–µ `notes/` –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."

    best_match, score = process.extractOne(user_text, note_files)
    if score < 60:
        return f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ '{user_text}'."

    filepath = os.path.join(NOTES_DIR, best_match)
    with open(filepath, "r", encoding="utf-8") as f:
        existing_text = f.read()

    messages = [
        {"role": "system", "content": SYSTEM_PROMPT_UPDATE_NOTE},
        {"role": "user", "content": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É –∑–∞–º–µ—Ç–∫—É:\n{existing_text}\n\n–ó–∞–ø—Ä–æ—Å: {user_text}"}
    ]
    updated_text = ask_jupiter(SYSTEM_PROMPT_UPDATE_NOTE + f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É –∑–∞–º–µ—Ç–∫—É:\n{existing_text}\n\n–ó–∞–ø—Ä–æ—Å: {user_text}")

    with open(filepath, "w", encoding="utf-8") as f:
        f.write(updated_text)

    return f"üìñ –ó–∞–º–µ—Ç–∫–∞ `{best_match}` –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"


def safe_delete(filepath):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º"""
    retries = 3
    for _ in range(retries):
        try:
            os.remove(filepath)
            return True
        except PermissionError:
            print(f"‚ö† –§–∞–π–ª `{filepath}` –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
            time.sleep(1)
    return False

def save_note(user_text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–º–µ—Ç–∫—É, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ Markdown"""
    os.makedirs(NOTES_DIR, exist_ok=True)

    markdown_text = generate_note(user_text)
    match = re.match(r'–ó–∞–º–µ—Ç–∫–∞:\s*["\'](.+?)["\']', markdown_text)
    if not match:
        title = "–ë–µ–∑_–Ω–∞–∑–≤–∞–Ω–∏—è"
    else:
        title = match.group(1).strip()
        markdown_text = markdown_text.replace(match.group(0), "").strip()

    filename = f"{title.replace(' ', '_')}.md"
    filepath = os.path.join(NOTES_DIR, filename)

    with open(filepath, "w", encoding="utf-8") as f:
        f.write(markdown_text)

    print(f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath}")
    return f"üìÇ –ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ `notes/{filename}`!"

def summarize_note(note_name: str):
    """–ò—â–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –ø–æ—Ö–æ–∂–µ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    if not note_files:
        return "‚ùå –í –ø–∞–ø–∫–µ `notes/` –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."

    best_match, score = process.extractOne(note_name, note_files)
    if score < 60:
        return f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ '{note_name}'."

    filepath = os.path.join(NOTES_DIR, best_match)

    with open(filepath, "r", encoding="utf-8") as f:
        note_text = f.read()

    summary_request = SHORT_PROMPT + "\n–í–æ—Ç —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏:\n" + note_text
    return ask_jupiter(summary_request)

def open_note(user_text):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É —Å –±–ª–∏–∂–∞–π—à–∏–º —Å–æ–≤–ø–∞–¥–∞—é—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    if not note_files:
        return "‚ùå –í –ø–∞–ø–∫–µ `notes/` –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."

    best_match, score = process.extractOne(user_text, note_files)
    if score < 60:
        return f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ '{user_text}'."

    note_path = os.path.join(NOTES_DIR, best_match)
    subprocess.run(["start", note_path], shell=True)

    return f"üìñ –û—Ç–∫—Ä—ã–≤–∞—é –∑–∞–º–µ—Ç–∫—É `{best_match}`!"

def list_notes():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ —Å –∏—Ö —Ç–µ–≥–∞–º–∏"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    if not note_files:
        return "‚ùå –í –ø–∞–ø–∫–µ `notes/` –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."

    notes_list = []
    for filename in sorted(note_files):
        filepath = os.path.join(NOTES_DIR, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()
            match = re.search(r"–¢–µ–≥–∏:\s*(.+)", content)
            tags = "#" + match.group(1).replace(", ", " #").replace("# ", "#") if match else ""  # üìå –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
        notes_list.append(f"- {filename}\n  {tags}")

    return f"üìú –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫:\n" + "\n".join(notes_list)


def delete_notes_by_tag(user_text):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—è —Å–ø–∏—Å–æ–∫, –∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞—è —Ñ–∞–π–ª—ã –∏ —É–¥–∞–ª—è—è –∏—Ö"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    match = re.search(r"(—Ç–µ–≥–æ–º|—Å —Ç–µ–≥–æ–º)\s+(.+)", user_text, re.IGNORECASE)
    if not match:
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–≥ –≤ –∑–∞–ø—Ä–æ—Å–µ."

    tag = match.group(2).strip()
    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    to_delete = []

    for filename in note_files:
        filepath = os.path.join(NOTES_DIR, filename)
        with open(filepath, "r", encoding="utf-8") as f:
            content = f.read()
            if re.search(r"–¢–µ–≥–∏:\s*.*?\b" + re.escape(tag) + r"\b", content, re.IGNORECASE):
                to_delete.append(filepath)

    deleted_notes = []
    for filepath in to_delete:
        try:
            os.remove(filepath)
            deleted_notes.append(os.path.basename(filepath))
        except PermissionError:
            return f"‚ùå –§–∞–π–ª `{filepath}` –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º. –ó–∞–∫—Ä–æ–π –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

    if not deleted_notes:
        return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º `{tag}`."

    notes_list = "\n".join(f"- {name}" for name in sorted(deleted_notes))
    return f"üóë –£–¥–∞–ª–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–æ–º `{tag}`:\n{notes_list}"

def delete_note_by_name(user_text):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–º–µ—Ç–∫—É –ø–æ –∏–º–µ–Ω–∏ (—Å–∞–º–æ–µ –±–ª–∏–∑–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)"""
    if not os.path.exists(NOTES_DIR):
        return "üìÇ –ü–∞–ø–∫–∞ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."

    note_files = [f for f in os.listdir(NOTES_DIR) if f.endswith(".md")]
    if not note_files:
        return "‚ùå –í –ø–∞–ø–∫–µ `notes/` –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫."

    best_match, score = process.extractOne(user_text, note_files)
    if score < 60:
        return f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É –ø–æ—Ö–æ–∂—É—é –Ω–∞ '{user_text}'."

    note_path = os.path.join(NOTES_DIR, best_match)
    os.remove(note_path)

    return f"üóë –ó–∞–º–µ—Ç–∫–∞ `{best_match}` —É–¥–∞–ª–µ–Ω–∞!"