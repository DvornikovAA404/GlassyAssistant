import sys
import time
import os
import uuid
import ocr # –ö–æ–Ω—Å–ø–µ–∫—Ç—ã
import shutil
import re
import json
import pyautogui
import keyboard
import asyncio
import nest_asyncio
from datetime import datetime
import jupiter
from jupiter import ask_jupiter # –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥—É–ª—å
from unona import WeatherAPI # –ü–æ–≥–æ–¥–Ω—ã–π –º–æ–¥—É–ª—å
import explorer_control
from explorer_control import * # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–æ–º
import speech_recognition as sr
import pyttsx3
from presentation_api import generate_presentation_pdf # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π
import pygame
from pydub import AudioSegment
from notes import * # –ó–∞–º–µ—Ç–æ—á–Ω–∏–∫

from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QHBoxLayout, QLabel, QDesktopWidget
from PyQt5.QtGui import QFont, QPainter, QLinearGradient, QColor, QBrush
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer

# Telegram imports
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters

import pyautogui
from fuzzywuzzy import process
from news import * # –ù–æ–≤–æ—Å—Ç–Ω–æ–π –º–æ–¥—É–ª—å
import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning, module="PyQt5")

nest_asyncio.apply()

with open('config.json', 'r') as f:
    config = json.load(f)
TELEGRAM_CONFIG = config.get("telegram", {})
TELEGRAM_BOT_TOKEN = TELEGRAM_CONFIG.get("bot_token")
TELEGRAM_USER_ID = TELEGRAM_CONFIG.get("user_id")

pyautogui.FAILSAFE = True
pyautogui.PAUSE = 0.1

current_date = datetime.now().strftime("%d %B %Y")


class VoiceWorker(QThread):
    recognized = pyqtSignal(str)
    finished = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.is_listening = True
        self.is_paused = False
        self.recognizer = sr.Recognizer()
        self.microphone = sr.Microphone()

        with self.microphone as src:
            print("–ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –º–∏–∫—Ä–æ—Ñ–æ–Ω, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            self.recognizer.adjust_for_ambient_noise(src, duration=1.0)
            self.recognizer.dynamic_energy_threshold = False
            self.recognizer.energy_threshold = 400
            self.recognizer.pause_threshold = 1.0

    def run(self):
        """–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"""
        with self.microphone as src:
            while self.is_listening:
                if self.is_paused or (
                        hasattr(self, "assistant") and self.assistant.is_generating):
                    time.sleep(0.1)
                    continue
                try:
                    audio = self.recognizer.listen(src, timeout=3)
                    text = self.recognizer.recognize_google(audio, language="ru-RU").lower()
                    if "–æ–∑–≤—É—á–∏–≤–∞—é –æ—Ç–≤–µ—Ç" in text:
                        continue
                    if text:
                        self.recognized.emit(text)
                except sr.WaitTimeoutError:
                    self.recognized.emit("")
                except sr.UnknownValueError:
                    pass
                except sr.RequestError as e:
                    print("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞:", e)
                except Exception as e:
                    print("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞:", e)
        self.finished.emit()

    def pause(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–≤–æ–¥–∞"""
        print("–ü–∞—É–∑–∞...")
        self.is_paused = True

    def resume(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–≤–æ–¥–∞"""
        print("–í–æ–∑–æ–±–Ω–æ–≤–ª—è—é —Å–ª—É—à–∞—Ç—å...")
        self.is_paused = False

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞"""
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç–æ–∫–∞...")
        self.is_listening = False
        self.is_paused = False
        self.wait()


class SpeechWorker(QThread):
    finished = pyqtSignal()
    audio_ready = pyqtSignal(str, str)

    def __init__(self, text, filename, temp_filename, app, chat_id=None, assistant=None):
        super().__init__()
        self.text = text
        self.filename = filename
        self.temp_filename = temp_filename
        self.app = app
        self.chat_id = chat_id
        self.assistant = assistant
        self.is_playing = True

    def run(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        try:
            if not self.text.strip():
                return

            if self.assistant and self.assistant.worker:
                self.assistant.worker.pause()

            engine = pyttsx3.init()
            voices = engine.getProperty('voices')
            rus_voice = None
            for v in voices:
                if "RU" in v.name:
                    rus_voice = v
                    break
            if rus_voice:
                engine.setProperty('voice', rus_voice.id)
            else:
                print("–†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
            engine.setProperty('rate', 150)
            engine.setProperty('volume', 1.0)

            engine.save_to_file(self.text, self.temp_filename)
            engine.runAndWait()

            aud = AudioSegment.from_wav(self.temp_filename)
            faster_aud = aud.speedup(playback_speed=1.2)
            faster_aud.export(self.filename, format="mp3")
            ogg_file = self.filename.replace(".mp3", ".ogg")
            aud = AudioSegment.from_mp3(self.filename)
            aud.export(ogg_file, format="ogg", codec="libopus")

            pygame.mixer.init()
            pygame.mixer.music.load(self.filename)
            pygame.mixer.music.play()

            if self.chat_id:
                self.audio_ready.emit(ogg_file, self.text)

            while pygame.mixer.music.get_busy() and self.is_playing:
                time.sleep(0.1)

            self.cleanup()
            time.sleep(0.5)
        except Exception as e:
            print("TTS –æ—à–∏–±–∫–∞:", e)
            self.cleanup()
        finally:
            if self.assistant and self.assistant.worker:
                self.assistant.worker.resume()
            self.finished.emit()

    def stop(self):
        self.is_playing = False
        try:
            pygame.mixer.music.stop()
            pygame.mixer.quit()
        except Exception as e:
            print("–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è:", e)
        self.cleanup()

    def cleanup(self):
        try:
            if os.path.exists(self.filename):
                os.remove(self.filename)
            if os.path.exists(self.temp_filename):
                os.remove(self.temp_filename)
            ogg_file = self.filename.replace(".mp3", ".ogg")
            if os.path.exists(ogg_file):
                os.remove(ogg_file)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:", e)


class TelegramBot:
    def __init__(self, token, user_id, assistant):
        self.token = token
        self.user_id = user_id
        self.assistant = assistant
        self.application = Application.builder().token(self.token).build()
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.Text() & ~filters.Command(), self.handle_message))

    async def start(self, update: Update, context):
        """–î–µ–π—Å—Ç–≤–∏–µ –Ω–∞ /start"""
        if update.effective_user.id != int(self.user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        await update.message.reply_text(
            "üöÄ –Æ–ø–∏—Ç–µ—Ä –≥–æ—Ç–æ–≤! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ '–Æ–ø–∏—Ç–µ—Ä, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ Python' –∏–ª–∏ '–û—Ç–∫—Ä–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫'.")

    async def handle_message(self, update: Update, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if update.effective_user.id != int(self.user_id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        txt = update.message.text.lower()
        print("–ü–æ–ª—É—á–∏–ª Telegram –∫–æ–º–∞–Ω–¥—É:", txt)
        self.assistant.handle_telegram_command(txt, update.effective_chat.id)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞...")
        try:
            asyncio.run(self.application.run_polling())
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≤ Telegram-–±–æ—Ç–µ:", e)
        finally:
            print("Telegram-–±–æ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        print("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Telegram-–±–æ—Ç–∞...")
        asyncio.run_coroutine_threadsafe(self.application.stop(), asyncio.get_running_loop())
        asyncio.run_coroutine_threadsafe(self.application.shutdown(), asyncio.get_running_loop())


class TelegramBotThread(QThread):
    def __init__(self, bot):
        super().__init__()
        self.bot = bot

    def run(self):
        self.bot.run()


class GlassyAssistant(QWidget):
    def __init__(self):
        super().__init__()
        self.is_active = False
        self.is_generating = False
        self.worker = None
        self.speech_worker = None
        self.is_talking = False
        self.conversation_history = []

        self.selected_files = []
        self.full_text = ""
        self.message_history = [{
            "role": "system",
            "content": "–¢—ã –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Æ–ø–∏—Ç–µ—Ä. –û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        }]

        self.telegram_bot = None
        self.telegram_thread = None

        self.commands = {
            "–æ—Ç–∫—Ä–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫": lambda text: explorer_control.open_explorer(),
            "–∑–∞–∫—Ä–æ–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫": lambda text: explorer_control.close_explorer(),
            "–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É": lambda text: explorer_control.open_folder(text.replace("–æ—Ç–∫—Ä–æ–π –ø–∞–ø–∫—É ", "")),
            "–≤–µ—Ä–Ω–∏—Å—å": lambda text: explorer_control.back(),
            "–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª": lambda text: explorer_control.open_file(text.replace("–æ—Ç–∫—Ä–æ–π —Ñ–∞–π–ª ", "")),
            "–≤—Å—Ç–∞–≤—å —Ç–µ–∫—Å—Ç": lambda text: self._insert_text(text),
            "–º—ã—à–∫—É": lambda text: self._move_cursor(text),
            "–∫—É—Ä—Å–æ—Ä": lambda text: self._move_cursor(text),
            "—Å–æ–∑–¥–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ": lambda text: self.dispatch_create_pdf_presentation(text),
            "–∑–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–π —Å–∞–π—Ç": lambda text: self.run_ocr(),
            "–∑–∞–∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–π —Å—Ç–∞—Ç—å—é": lambda text: self.run_ocr(),
            "—Å–¥–µ–ª–∞–π –∫–æ–Ω—Å–ø–µ–∫—Ç —Å–∞–π—Ç–∞": lambda text: self.run_ocr(),
            "–∫–æ–Ω—Å–ø–µ–∫—Ç —Å–∞–π—Ç–∞": lambda text: self.run_ocr(),
            "—Å–æ—Ö—Ä–∞–Ω–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç": lambda text: self.save_summary(text),
            "–∑–∞–∫—Ä–æ–π –æ–∫–Ω–æ": lambda text: self.close_active_window(),
            "–≤–∏–¥–∏—à—å —Å–∞–π—Ç": lambda text: self.send_current_url_to_telegram(),
            "—Å–ª—É—à–∞–π": lambda text: self.activate_voice(),
            "–∑–∞–º–æ–ª—á–∏": lambda text: self.deactivate_voice(),
            "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º—è": lambda text: self.say_time(),
            "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å": lambda text: self.say_time(),
            "–∫–∞–∫–æ–µ —Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ": lambda text: self.say_date(),
            "–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –¥–∞—Ç–∞": lambda text: self.say_date(),
            "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞": lambda text: self.set_microphone_sensitivity(text),
            "—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–∞": lambda text: self.set_microphone_sensitivity(text),
            "–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É": lambda text: save_note(text),
            "–æ—Ç–∫—Ä–æ–π –∑–∞–º–µ—Ç–∫—É": lambda text: open_note(text),
            "—É—Å—Ç–∞–Ω–æ–≤–∏ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": lambda text: self.set_microphone_sensitivity(text),
            "—Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫": lambda text: list_notes(),
            "—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–æ–º": lambda text: delete_notes_by_tag(text),
            "–¥–æ–ø–æ–ª–Ω–∏ –∑–∞–º–µ—Ç–∫—É": lambda text: update_note(text),
            "—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º": lambda text: delete_note_by_name(text),
            "–ø—Ä–æ—á–∏—Ç–∞–π –∑–∞–º–µ—Ç–∫—É": lambda text: self.speak(summarize_note(text)),
            "–ø–µ—Ä–µ—Å–∫–∞–∂–∏ –∑–∞–º–µ—Ç–∫—É": lambda text: self.speak(summarize_note(text)),
            "–¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º": lambda text: self.enable_talk_mode(),
            "—Ö–≤–∞—Ç–∏—Ç": lambda text: self.disable_talk_mode(),
            "—é–Ω–æ–Ω–∞": lambda text: self.summarize_weather_and_traffic(),
            "–ø–æ–≥–æ–¥–∞": lambda text: self._handle_weather_request(text),
            "—Ç—Ä–∞—Ñ–∏–∫": lambda text: summarize_traffic(),
            "–Ω–æ–≤–æ—Å—Ç–∏": lambda text: self.handle_news_request()
        }

        self.initUI()
        self.button.clicked.connect(self.toggle_voice)
        self.update_button_style()

        self.start_telegram_bot()

    def reset_generating_state(func):
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–Ω–∏–º–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã"""

        def wrapper(*args, **kwargs):
            result = func(*args, **kwargs)
            if hasattr(args[0], "is_generating"):
                args[0].is_generating = False
            return result

        return wrapper

    @reset_generating_state
    def enable_talk_mode(self):
        """–í–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.is_talking = True
        return "üó£ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á—ë–Ω. –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–π, —è –æ—Ç–≤–µ—á—É!"

    @reset_generating_state
    def disable_talk_mode(self):
        """–í—ã–∫–ª—é—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"""
        self.is_talking = False
        return "üîá –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã —Å '–Æ–ø–∏—Ç–µ—Ä, ...'"

    def pause_worker(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –æ–∑–≤—É—á–∫–æ–π."""
        if self.worker:
            self.worker.pause()

    @reset_generating_state
    def handle_news_request(user_input):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤—ã–∑—ã–≤–∞–µ—Ç `fetch_news()`."""

        user_input = str(user_input) if user_input else "–Ω–æ–≤–æ—Å—Ç–∏"

        categories = ["—Å–ø–æ—Ä—Ç", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–º–∏—Ä–æ–≤—ã–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–ø–æ–ª–∏—Ç–∏–∫–∞", "–∫—É–ª—å—Ç—É—Ä–∞"]
        selected_category = next((cat for cat in categories if cat in user_input.lower()), "–≤—Å–µ")

        count_match = re.search(r"(\d+) –Ω–æ–≤–æ—Å—Ç", user_input)
        count = int(count_match.group(1)) if count_match else 5

        city_match = re.search(r"–≤ ([–ê-–Ø–∞-—èA-Za-z]+)", user_input)
        city = city_match.group(1) if city_match else None

        return main(topic=selected_category, count=count, city="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫")

    @reset_generating_state
    def summarize_weather_and_traffic(self):
        """–°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø–æ–≥–æ–¥–µ –∏ —Ç—Ä–∞—Ñ–∏–∫—É"""
        weather_api = WeatherAPI("Novosibirsk")
        traffic_summary = summarize_traffic()
        weather_data = weather_api.get_weather_now()

        prompt = f"""–¢—ã ‚Äî –Æ–Ω–æ–Ω–∞, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. 
        –¢–µ–±–µ –¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–∞—Ñ–∏–∫–µ –∏ –ø–æ–≥–æ–¥–µ: 

        üå§ –ü–æ–≥–æ–¥–∞: {weather_data} 
        üö¶ –î–æ—Ä–æ–∂–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: {traffic_summary} 

        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–¥–∏–Ω—ã–π —É–¥–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.  
        –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫ —ç—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –¥—Ä—É–≥ –Ω–∞ –¥—Ä—É–≥–∞, 
        –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–¥–µ–∂–¥–µ –∏ –º–∞—Ä—à—Ä—É—Ç—É, –Ω–æ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."""

        full_report = ask_jupiter(prompt)

        self.speak(full_report)

        return full_report

    @reset_generating_state
    def _handle_weather_request(self, text):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≥–æ–¥–Ω–æ–≥–æ –º–æ–¥—É–ª—è –≤—ã–∑–≤–∞—Ç—å"""
        weather_api = WeatherAPI("Novosibirsk")  # TODO: –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞—Å–∏—á–µ—Å–∫–∏–º
        PROMPT = """–¢—ã - –Æ–Ω–æ–Ω–∞. –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–µ –ø–æ–≥–æ–¥—ã. –¢–µ–±–µ –¥–∞–µ—Ç—Å—è json-–∫–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–≥–æ–¥—ã. 
            –ü–æ—Å–æ–≤–µ—Ç—É–π, –≤–æ —á—Ç–æ –æ–¥–µ—Ç—å—Å—è. –ü—Ä–µ–¥–ª–æ–∂–∏ —á–µ–≥–æ-–Ω–∏–±—É–¥—å. –ù–æ –∫–æ—Ä–æ—Ç–∫–æ, –Ω–µ —Ä–∞—Å–ø–∏—Å—ã–≤–∞—è —ç—Ç–æ –≤ –ø–æ—ç–º—É, –∏ –ø—Ä–∏ —ç—Ç–æ–º –∂–∏–≤–æ."""

        text = text.lower().strip()
        text = re.sub(r"^(—é–Ω–æ–Ω–∞|—Å–∫–∞–∂–∏|—Ä–∞—Å—Å–∫–∞–∂–∏|–æ—Ç–≤–µ—Ç—å|–ø–æ–≥–æ–¥–∞),?\s*", "", text)  

        if "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in text:
            return ask_jupiter(f"{PROMPT}\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {weather_api.get_forecast(days_ahead=2)}")
        elif "–∑–∞–≤—Ç—Ä–∞" in text:
            return ask_jupiter(f"{PROMPT}\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {weather_api.get_forecast(days_ahead=1)}")
        elif "–≤—ã—Ö–æ–¥–Ω—ã–µ" in text or "—Å—É–±–±–æ—Ç–∞" in text or "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ" in text:
            return ask_jupiter(f"{PROMPT}\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {weather_api.get_weekend_weather()}")

        match = re.search(
            r"(\d{1,2}) (—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)", text,
            re.IGNORECASE)
        if match:
            day = int(match.group(1))
            month_names = {
                "—è–Ω–≤–∞—Ä—è": 1, "—Ñ–µ–≤—Ä–∞–ª—è": 2, "–º–∞—Ä—Ç–∞": 3, "–∞–ø—Ä–µ–ª—è": 4, "–º–∞—è": 5, "–∏—é–Ω—è": 6,
                "–∏—é–ª—è": 7, "–∞–≤–≥—É—Å—Ç–∞": 8, "—Å–µ–Ω—Ç—è–±—Ä—è": 9, "–æ–∫—Ç—è–±—Ä—è": 10, "–Ω–æ—è–±—Ä—è": 11, "–¥–µ–∫–∞–±—Ä—è": 12
            }
            month = month_names[match.group(2).lower()]
            year = datetime.now().year

            date_str = f"{year}-{month:02d}-{day:02d}"
            return ask_jupiter(f"{PROMPT}\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {weather_api.get_specific_date_weather(date_str)}")

        return ask_jupiter(f"{PROMPT}\n–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ: {weather_api.get_weather_now()}")

    @reset_generating_state
    def set_microphone_sensitivity(self, text):
        """–ú–µ–Ω—è–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞"""
        match = re.search(r"\d+", text)
        if match:
            sensitivity = int(match.group(0))
            if 100 >= sensitivity >= 1000:
                return "‚ùå –û—à–∏–±–∫–∞: –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 100 –¥–æ 1000."

            self.worker.recognizer.energy_threshold = sensitivity
            return f"üîä –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {sensitivity}."
        return "‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!"

    @reset_generating_state
    def say_time(self):
        """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
        now = datetime.now().strftime("%H:%M")
        return f"‚è∞ –°–µ–π—á–∞—Å {now}"

    @reset_generating_state
    def say_date(self):
        """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É"""
        today = datetime.now().strftime("%d %B %Y")
        return f"üìÖ –°–µ–≥–æ–¥–Ω—è {today}"

    @reset_generating_state
    def _press_key(self, text):
        """–ù–∞–∂–∏–º–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏—à—É."""
        key = text.replace("–Ω–∞–∂–º–∏ –∫–ª–∞–≤–∏—à—É", "").strip()
        key_mapping = {"—ç–Ω—Ç–µ—Ä": "enter", "–∫–æ–Ω—Ç—Ä–æ–ª": "ctrl", "—à–∏—Ñ—Ç": "shift", "–∞–ª—å—Ç": "alt", "–ø—Ä–æ–±–µ–ª": "space"} # TODO: –°–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key = key_mapping.get(key, key)

        try:
            pyautogui.press(key)
            return f" –ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ {key}."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
            return f" –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å {key}."

    @reset_generating_state
    def close_active_window(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ"""
        try:
            pyautogui.hotkey("alt", "f4")
            return "–û–∑–≤—É—á–∏–≤–∞—é: –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ!"
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞: {e}")
            return "–û–∑–≤—É—á–∏–≤–∞—é: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ!"

    @reset_generating_state
    def activate_voice(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"""
        if not self.is_active:
            self.is_active = True
            self.full_text = ""
            self.text_label.setText("–°–ª—É—à–∞—é...")
            self.update_button_style()
            self.start_worker()
            return "üöÄ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        return "üîä –£–∂–µ —Å–ª—É—à–∞—é!"

    @reset_generating_state
    def deactivate_voice(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"""
        if self.is_active:
            self.is_active = False
            self.text_label.setText("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.update_button_style()
            self.cleanup_worker()
            self.stop_speech()
            QTimer.singleShot(1000, lambda: self.text_label.setText("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É"))
            return "ü§ê –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω!"
        return "üîá –£–∂–µ –º–æ–ª—á—É!"

    @reset_generating_state
    def send_current_url_to_telegram(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π URL –≤ Telegram"""
        file_path = "url.txt"

        if not os.path.exists(file_path):
            return "–û–∑–≤—É—á–∏–≤–∞—é: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π URL."

        with open(file_path, "r", encoding="utf-8") as f:
            current_url = f.read().strip()

        response = f"üëÄ –°–µ–π—á–∞—Å —è –≤–∏–∂—É —Å–∞–π—Ç: {current_url}"

        if self.telegram_bot:
            if not hasattr(self, "last_sent_url") or self.last_sent_url != current_url:
                self.last_sent_url = current_url
                asyncio.run_coroutine_threadsafe(
                    self.telegram_bot.application.bot.send_message(chat_id=TELEGRAM_USER_ID, text=response),
                    asyncio.get_event_loop()
                )

        return response

    def _hold_key(self, text):
        """–ó–∞–∂–∏–º–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é –∫–ª–∞–≤–∏—à—É."""
        key = text.replace("–∑–∞–∂–º–∏ –∫–ª–∞–≤–∏—à—É", "").strip()
        key_mapping = {"—ç–Ω—Ç–µ—Ä": "enter", "–∫–æ–Ω—Ç—Ä–æ–ª": "ctrl", "—à–∏—Ñ—Ç": "shift", "–∞–ª—å—Ç": "alt", "–ø—Ä–æ–±–µ–ª": "space"} # TODO: –°–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key = key_mapping.get(key, key)

        try:
            keyboard.press(key)
            return f" –ó–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ {key}."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
            return f" –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∂–∞—Ç—å {key}."

    def on_speech_finished(self):
        """–°–ª—É—à–∞—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        self.is_generating = False
        if self.is_active and self.worker:
            self.worker.resume()
            self.text_label.setText("–°–ª—É—à–∞—é...")

    def speak(self, text):
        """–ì–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–≤–æ–¥"""
        if not text.strip():
            return

        self.is_generating = True
        QTimer.singleShot(50, self.pause_worker)

        temp_dir = os.path.join(os.getenv("TEMP") or os.getcwd(), "tts_cache")
        os.makedirs(temp_dir, exist_ok=True)

        fname = os.path.join(temp_dir, f"{uuid.uuid4()}.mp3")
        temp_fname = os.path.join(temp_dir, f"{uuid.uuid4()}_temp.wav")

        self.speech_worker = SpeechWorker(text, fname, temp_fname, QApplication.instance(), assistant=self)
        self.speech_worker.finished.connect(self.on_speech_finished)
        self.speech_worker.start()

    @reset_generating_state
    def save_summary(self, user_input):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ `summary/`, –∏–ª–∏ –≤ '–ù–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        base_dir = "summary"

        match = re.search(r"—Å–æ—Ö—Ä–∞–Ω–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ (.+)", user_input, re.IGNORECASE)
        if match:
            folder_name = match.group(1).strip()
            if not folder_name:
                return "‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!"
        else:
            folder_name = "–ù–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ"

        target_folder = os.path.join(base_dir, folder_name)
        os.makedirs(target_folder, exist_ok=True)

        debug_file = "debug.md"
        if not os.path.exists(debug_file):
            return "‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª `debug.md` –Ω–µ –Ω–∞–π–¥–µ–Ω!"

        with open(debug_file, "r", encoding="utf-8") as f:
            first_line = f.readline().strip()

        match = re.match(r"#\s*(.+)", first_line)
        if not match:
            return "‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–æ–∫!"

        filename = match.group(1).strip().replace(" ", "_") + ".md"
        target_path = os.path.join(target_folder, filename)

        shutil.copy(debug_file, target_path)
        return f"‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ `{target_path}`"

    def _release_key(self, text):
        """–û—Ç–ø—É—Å–∫–∞–µ—Ç –∑–∞–∂–∞—Ç—É—é –∫–ª–∞–≤–∏—à—É."""
        key = text.replace("–æ—Ç–ø—É—Å—Ç–∏ –∫–ª–∞–≤–∏—à—É", "").strip()
        key_mapping = {"—ç–Ω—Ç–µ—Ä": "enter", "–∫–æ–Ω—Ç—Ä–æ–ª": "ctrl", "—à–∏—Ñ—Ç": "shift", "–∞–ª—å—Ç": "alt", "–ø—Ä–æ–±–µ–ª": "space"} # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        key = key_mapping.get(key, key)

        try:
            keyboard.release(key)
            return f" –ö–ª–∞–≤–∏—à–∞ {key} –æ—Ç–ø—É—â–µ–Ω–∞."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –∫–ª–∞–≤–∏—à–∏: {e}")
            return f" –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—É—Å—Ç–∏—Ç—å {key}."

    def _click_mouse(self, text):
        """–ù–∞–∂–∏–º–∞–µ—Ç –ª–µ–≤—É—é –∏–ª–∏ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏."""
        button = "left" if "–ª–µ–≤—É—é" in text else "right" if "–ø—Ä–∞–≤—É—é" in text else "left"

        try:
            pyautogui.click(button=button)
            return f" –ù–∞–∂–∞—Ç–∞ {button} –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏: {e}")
            return f" –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å {button} –∫–Ω–æ–ø–∫—É."

    @reset_generating_state
    def _move_cursor(self, text):
        """–ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫—É—Ä—Å–æ—Ä –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π."""
        dx, dy = 0, 0

        match = re.search(r'–Ω–∞ (\d+) –ø–∏–∫—Å–µ–ª', text)
        pixels = int(match.group(1)) if match else 100

        if "–≤–ø—Ä–∞–≤–æ" in text:
            dx = pixels
        elif "–≤–ª–µ–≤–æ" in text:
            dx = -pixels
        elif "–≤–≤–µ—Ä—Ö" in text:
            dy = -pixels
        elif "–≤–Ω–∏–∑" in text:
            dy = pixels

        try:
            pyautogui.moveRel(dx, dy)
            return f"–ö—É—Ä—Å–æ—Ä –ø–µ—Ä–µ–º–µ—â—ë–Ω –Ω–∞ {pixels} –ø–∏–∫—Å–µ–ª–µ–π."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫—É—Ä—Å–æ—Ä."

    @reset_generating_state
    def _press_combination(self, text):
        """–ù–∞–∂–∏–º–∞–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∫–ª–∞–≤–∏—à, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω–∞–∂–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é Ctrl+Shift+Esc'."""
        keys = text.replace("–Ω–∞–∂–º–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏—é", "").strip()
        key_list = [key.strip() for key in keys.split("+")]

        try:
            pyautogui.hotkey(*key_list)
            return f"–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –∫–ª–∞–≤–∏—à {' + '.join(key_list)} –Ω–∞–∂–∞—Ç–∞."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª–∞–≤–∏—à: {e}")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é."

    def _scroll_mouse(self, direction):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫—Ä–æ–ª–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–≤–µ—Ä—Ö –∏–ª–∏ –≤–Ω–∏–∑."""
        amount = -100 if direction == "up" else 100
        try:
            pyautogui.scroll(amount)
            return f" –°–∫—Ä–æ–ª–ª –≤—ã–ø–æ–ª–Ω–µ–Ω {direction}."
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–æ–ª–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return f" –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫—Ä–æ–ª–ª {direction}."

    @reset_generating_state
    def _select_files_by_name(self, text):
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
        file_list = text.replace("–≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª", "").replace("–≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª—ã", "").strip()
        if file_list:
            filenames = [name.strip() for name in file_list.split(",")]
            self.selected_files = self.explorer.select_files_by_name(filenames)
            return f"–û–∑–≤—É—á–∏–≤–∞—é: –í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: {', '.join(self.selected_files) or '–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}."
        return "–û–∑–≤—É—á–∏–≤–∞—é: –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."

    @reset_generating_state
    def run_ocr(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç —Å–∞–π—Ç–∞ –∏–ª–∏ –∫–Ω–∏–≥–∏"""
        try:
            ocr.main()
            return "–û–∑–≤—É—á–∏–≤–∞—é: –ö–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!"
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ `ocr.py`: {e}"

    @reset_generating_state
    def dispatch_create_pdf_presentation(self, text):
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é"""
        import re
        match = re.search(r"—Å–æ–∑–¥–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ\s+(.+?)\s+–Ω–∞\s+(\d+)\s*–ª–∏—Å—Ç", text, re.IGNORECASE)
        if match:
            theme = match.group(1).strip()
            num_slides = int(match.group(2))
            try:
                pdf_path = generate_presentation_pdf(theme, num_slides)
                response = f"–û–∑–≤—É—á–∏–≤–∞—é: –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {pdf_path}"
            except Exception as e:
                response = f"–û–∑–≤—É—á–∏–≤–∞—é: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {e}"
        else:
            response = ("–û–∑–≤—É—á–∏–≤–∞—é: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: "
                        "'–°–æ–∑–¥–∞–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —Ç–µ–º–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ 5 –ª–∏—Å—Ç–æ–≤'")
        return response

    def handle_telegram_command(self, text, chat_id):
        self.handle_command(text, chat_id)

    def initUI(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        self.setFixedSize(600, 60)
        self.setWindowTitle('–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫')
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)

        screen = QDesktopWidget().screenGeometry()
        x = (screen.width() - self.width()) // 2
        self.move(x, 0)

        layout = QHBoxLayout()
        layout.setContentsMargins(20, 0, 15, 0)
        layout.setSpacing(10)

        self.text_label = QLabel("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É", self)
        self.text_label.setFont(QFont("Segoe UI", 12))
        self.text_label.setStyleSheet("""
            color: white;
            background-color: transparent;
        """)
        layout.addWidget(self.text_label, alignment=Qt.AlignLeft | Qt.AlignVCenter)
        layout.addStretch()

        self.button = QPushButton()
        self.button.setFixedSize(34, 34)
        layout.addWidget(self.button)

        self.setLayout(layout)

    def update_button_style(self):
        """–ú–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏"""
        clr = "#FF4C4C" if self.is_active else "#007BFF"
        self.button.setStyleSheet(f"background-color: {clr}; border-radius: 17px; border: none;")

    def toggle_voice(self):
        """–í–∫–ª/–≤—ã–∫–ª –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥"""
        if not self.is_active:
            self.is_active = True
            self.full_text = ""
            self.text_label.setText("–°–ª—É—à–∞—é...")
            self.update_button_style()
            self.start_worker()
        else:
            self.is_active = False
            self.text_label.setText("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.update_button_style()

            print("‚è≥ –ó–∞–≤–µ—Ä—à–∞—é –≤—Å–µ –≤—ã–ø–æ–ª–Ω—è—é—â–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã...")
            self.cleanup_worker()

            self.stop_speech()
            QTimer.singleShot(1000, lambda: self.text_label.setText("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É"))

    def start_worker(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        self.worker = VoiceWorker()
        self.worker.recognized.connect(self.handle_command)
        self.worker.finished.connect(self.restart_worker)
        self.worker.start()

    def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞"""
        if not TELEGRAM_BOT_TOKEN or not TELEGRAM_USER_ID:
            print("–¢–µ–ª–µ–≥—Ä–∞–º —Ç–æ–∫–µ–Ω –∏–ª–∏ ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            return
        print("–ó–∞–ø—É—Å–∫–∞—é Telegram-–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: " + TELEGRAM_BOT_TOKEN[:5] + "...")
        self.telegram_bot = TelegramBot(TELEGRAM_BOT_TOKEN, TELEGRAM_USER_ID, self)
        self.telegram_thread = TelegramBotThread(self.telegram_bot)
        self.telegram_thread.start()
        print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

    def stop_telegram_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–≥-–±–æ—Ç–∞"""
        if self.telegram_bot and self.telegram_thread:
            self.telegram_bot.stop()
            self.telegram_thread.wait(5000)
            self.telegram_bot = None
            self.telegram_thread = None
            print("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

    def ask_ai_directly(self, text):
        """–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä–µ–∂–∏–º"""
        CONVERSATION_PROMPT = (
            "–¢—ã ‚Äî –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –≤–µ–¥—É—â–∏–π –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä. "
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∏–∑–±–µ–≥–∞—è —Å—É—Ö–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º—É–ª—ã, –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥ –∏–ª–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã. "
            "–ï—Å–ª–∏ –æ–±—ä—è—Å–Ω—è–µ—à—å —á—Ç–æ-—Ç–æ —Å–ª–æ–∂–Ω–æ–µ, –¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫ –µ—Å–ª–∏ –±—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –¥—Ä—É–≥—É. "
            "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –≤ —Å—Ç–∏–ª–µ –æ–±—ã—á–Ω–æ–π –±–µ—Å–µ–¥—ã. "
            "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ, –Ω–µ –æ—Ç–≤–µ—á–∞–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ ‚Äî –ª—É—á—à–µ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."
        )

        if not self.is_talking:
            return ask_jupiter(text)

        self.conversation_history.append(text)

        MAX_HISTORY = 5
        if len(self.conversation_history) > MAX_HISTORY:
            self.conversation_history.pop(0)

        context = "\n".join(self.conversation_history)
        prompt = CONVERSATION_PROMPT + f"\n–í–æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n{text}"

        response = ask_jupiter(prompt)

        self.conversation_history.append(response)

        self.speak(response)

        return response

    def _select_all_files(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã"""
        try:
            self.selected_files = self.explorer.select_all_files()
            if self.selected_files:
                return "–û–∑–≤—É—á–∏–≤–∞—é: –í—ã–±—Ä–∞–Ω—ã —Ñ–∞–π–ª—ã: " + ", ".join(self.selected_files)
            else:
                return "–û–∑–≤—É—á–∏–≤–∞—é: –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        except Exception as ex:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∞–π–ª–æ–≤:", ex)
            return "–û–∑–≤—É—á–∏–≤–∞—é: –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤."

    def handle_command(self, text, chat_id=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥"""
        start = time.time()
        print("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞:", text)

        if self.is_generating:
            print("–î—Ä—É–≥–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∂–¥–∏!")
            if chat_id and self.telegram_bot:
                asyncio.run_coroutine_threadsafe(
                    self.telegram_bot.application.bot.send_message(chat_id=chat_id, text="‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."),
                    asyncio.get_event_loop()
                )
            return

        self.is_generating = True
        self.text_label.setText("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

        if self.worker:
            self.worker.pause()

        QApplication.processEvents()

        if not text:
            response = "–ù–∏—á–µ–≥–æ –Ω–µ —É—Å–ª—ã—à–∞–ª, –ø–æ–≤—Ç–æ—Ä–∏."
        else:
            text = text.strip()

            if self.is_talking and text.lower() not in ["–∑–∞–º–æ–ª—á–∏", "—Å–ª—É—à–∞–π", "—Ö–≤–∞—Ç–∏—Ç"]:
                response = self.ask_ai_directly(text)
            else:
                is_ai_query = text.lower().startswith("—é–ø–∏—Ç–µ—Ä")
                if is_ai_query:
                    text = re.sub(r'^—é–ø–∏—Ç–µ—Ä,?\s*', '', text)

                if is_ai_query or "—é–ø–∏—Ç–µ—Ä" in text.lower():
                    self.message_history.append({"role": "user", "content": text})
                    response = ask_jupiter(text, self.explorer)
                    self.message_history.append({"role": "assistant", "content": response})
                else:
                    best_match, score = process.extractOne(text[:40], list(self.commands.keys()))
                    print(f"–õ—É—á—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '{best_match}' —Å score: {score}")

                    response = self.commands[best_match](text) if score > 70 else ""


        print("–û—Ç–≤–µ—Ç:", response)

        if chat_id and self.telegram_bot:
            asyncio.run_coroutine_threadsafe(
                self.telegram_bot.application.bot.send_message(chat_id=chat_id, text=response),
                asyncio.get_event_loop()
            )

        self.full_text += " " + response
        final_text = "üîπ " + self.full_text.strip()

        self.is_generating = False
        if self.is_active and self.worker:
            self.worker.resume()
            self.text_label.setText("–°–ª—É—à–∞—é...")

        print("–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {:.2f} —Å–µ–∫".format(time.time() - start))

    def split_text(self, text):
        parts = text.split('. ')
        return [p + ('.' if not p.endswith('.') else '') for p in parts if p]

    def send_audio_to_telegram(self, ogg_filename, text, chat_id):
        if not self.telegram_bot:
            print("Telegram-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∞—É–¥–∏–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—é.")
            return
        try:
            if os.path.exists(ogg_filename):
                with open(ogg_filename, 'rb') as audio:
                    asyncio.run_coroutine_threadsafe(
                        self.telegram_bot.application.bot.send_voice(chat_id=chat_id, voice=audio, caption=text[:200]),
                        asyncio.get_event_loop()
                    )
            else:
                print("‚ö†Ô∏è OGG-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:", ogg_filename)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ Telegram:", e)

    def on_speech_finished(self):
        """–ö–æ–≥–¥–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤—ã–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—é"""
        self.is_generating = False
        if self.is_active and self.worker:
            self.worker.resume()
            self.text_label.setText("–°–ª—É—à–∞—é...")
        self.speech_worker = None

    def stop_speech(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞"""
        if self.speech_worker and self.speech_worker.isRunning():
            self.speech_worker.stop()
            self.speech_worker.wait()
            self.speech_worker = None

        try:
            if pygame.mixer.get_init():
                pygame.mixer.music.stop()
                pygame.mixer.quit()
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –º—É–∑—ã–∫–∏: {e}")

    def cleanup_worker(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        self.stop_speech()

        if self.worker and self.worker.isRunning():
            print("‚è≥ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é `VoiceWorker`...")
            self.worker.terminate()
            self.worker.wait()
            self.worker = None

    def restart_worker(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        if self.is_active:
            QTimer.singleShot(500, self.start_worker)

    def paintEvent(self, event):
        """–û–∫—Ä–∞—Å–∫–∞ —Ñ–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        qp = QPainter(self)
        qp.setRenderHint(QPainter.Antialiasing)
        grad = QLinearGradient(0, self.height(), self.width(), 0)
        grad.setColorAt(0, QColor(255, 255, 255, 30))
        grad.setColorAt(1, QColor(240, 240, 240, 180))
        qp.setPen(Qt.NoPen)
        qp.setBrush(QBrush(grad))
        qp.drawRoundedRect(self.rect(), 20, 20)

    def mousePressEvent(self, event):
        """–ò–≤–µ–Ω—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏"""
        if event.button() == Qt.LeftButton:
            self.drag_pos = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –æ–∫–Ω–∞ –º—ã—à—å—é"""
        if event.buttons() == Qt.LeftButton and hasattr(self, 'drag_pos'):
            self.move(event.globalPos() - self.drag_pos)
            event.accept()

    def closeEvent(self, event):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.cleanup_worker()
        self.stop_telegram_bot()
        event.accept()


if __name__ == '__main__':
    import ctypes

    ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID('myappid')
    app = QApplication(sys.argv)
    app.setAttribute(Qt.AA_UseSoftwareOpenGL, False)
    win = GlassyAssistant()
    win.show()
    sys.exit(app.exec_())
