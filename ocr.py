import os
import re
import time
import requests
import subprocess
import jupiter # –ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –º–æ–¥—É–ª—å
import win32gui
import threading
from PyPDF2 import PdfReader
from urllib.parse import unquote

SYSTEM_PROMPT = (
    """–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤. –ù–∞ –≤—Ö–æ–¥ —Ç–µ–±–µ –ø–æ–¥–∞—ë—Ç—Å—è HTML-–∫–æ–¥ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—å–∏).

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –∏ –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏, –¥–æ–∫—É–º–µ–Ω—Ç–∞, –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ç.–ø.).
        –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–µ –±–ª–æ–∫–∏, —Ñ—É—Ç–µ—Ä—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ–Ω—é, —Å–∞–π–¥–±–∞—Ä—ã, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –≤–∏–¥–∂–µ—Ç—ã, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Å—ã–ª–∫–∏ –∏ –ø—Ä–æ—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
        –ù–µ –≤—ã–¥—É–º—ã–≤–∞—Ç—å –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –∫–æ–¥–µ. –¢–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
        –û—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown:
            –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, –≤—ã–¥–µ–ª–µ–Ω–∏—è, –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã.
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö).
            –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–∏–µ –ø–æ–º–µ—Ç–∫–∏ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è.

        –ï—Å–ª–∏ –≤ —Å—Ç–∞—Ç—å–µ –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–∏—Å–∫–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è Markdown-—Å–∏–Ω—Ç–∞–∫—Å–∏—Å.
        –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π, –ª–æ–≥–∏—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.

    ‚ö†Ô∏è –ù–µ –¥–æ–±–∞–≤–ª—è–π –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–º. –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å —Å–∞–º–æ–≥–æ –∫–æ–Ω—Å–ø–µ–∫—Ç–∞.
    –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏ –∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ—Ä–º–∏–Ω–æ–≤, –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –ø—Ä–∏–º–µ—Ä—ã ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π –∏—Ö –≤ –∫–æ–Ω—Å–ø–µ–∫—Ç.
    –ö–æ–Ω—Å–ø–µ–∫—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown.
    –ü–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ç–µ–º—ã –¥–æ–±–∞–≤—å "# üöÄ", –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–º ‚Äî üí†, –ø—Ä–∏–º–µ—Ä—ã —á–µ—Ä–µ–∑ üéØ.
    """
)


def extract_text_from_pdf(file_path):
    """–î–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø–¥—Ñ"""
    reader = PdfReader(file_path)
    text = ""
    for page in reader.pages:
        page_text = page.extract_text()
        if page_text:
            text += page_text + "\n"
    return text

def get_active_url():
    """–ß–∏—Ç–∞–µ—Ç URL –∏–∑ —Ñ–∞–π–ª–∞ 'url.txt'."""
    file_path = "url.txt"
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            url = f.read().strip()
            print(f"‚úÖ URL –∏–∑ —Ñ–∞–π–ª–∞: {url}")
            return url
    else:
        print("‚ùå –§–∞–π–ª 'url.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None


def fetch_page_content(url):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç HTML-–∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    headers = {
        "User-Agent": (
            "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/114.0.0.0 Safari/537.36"
        )
    }
    try:
        response = requests.get(url, headers=headers)
        response.encoding = "utf-8"
        if response.status_code == 200:
            print("‚úÖ –ö–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—É—á–µ–Ω")
            return response.text
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return None


def save_markdown(summary):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Å–ø–µ–∫—Ç –≤ 'debug.md'."""
    file_path = "debug.md"
    try:
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(summary)
        print("‚úÖ –ö–æ–Ω—Å–ø–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ 'debug.md'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ 'debug.md': {e}")

def classify_pdf(file_path):
    from PyPDF2 import PdfReader
    try:
        reader = PdfReader(file_path)
        num_pages = len(reader.pages)
        if num_pages < 30:
            classification = "–û–±—ã—á–Ω—ã–π"
        else:
            classification = "–ö–Ω–∏–≥–∞"
        print(f"–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è PDF: {classification} ({num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü)")
        return classification
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ PDF: {e}")
        return "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"


def split_into_chapters(text):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∫–Ω–∏–≥—É –Ω–∞ –≥–ª–∞–≤—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º ('–ì–ª–∞–≤–∞ 1', '–ß–∞—Å—Ç—å 2', '–≠–ø–∏–ª–æ–≥' –∏ —Ç. –¥.)
    –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 30 —Å—Ç—Ä–∞–Ω–∏—Ü.
    """
    chapters = re.split(r'\n\s*(–ì–ª–∞–≤–∞|–ß–∞—Å—Ç—å|–≠–ø–∏–ª–æ–≥) \d+\s*\n', text)

    if len(chapters) < 2:
        chapters = [text[i:i + 15000] for i in range(0, len(text), 15000)]

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(chapters)} –≥–ª–∞–≤(—ã)")
    return chapters

def summarize_pdf(file_path):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∫–Ω–∏–≥—É –Ω–∞ –≥–ª–∞–≤—ã, –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä—É–µ—Ç –∫–∞–∂–¥—É—é –≥–ª–∞–≤—É –æ—Ç–¥–µ–ª—å–Ω–æ –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å—ë –≤–æ–µ–¥–∏–Ω–æ.
    """
    print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–∏–≥–∏ (PDF): {file_path}")
    pdf_text = extract_text_from_pdf(file_path)

    classification = classify_pdf(file_path)

    if classification == "–û–±—ã—á–Ω—ã–π":
        combined_prompt = SYSTEM_PROMPT + "\n\n" + pdf_text
        summary = jupiter.ask_jupiter(combined_prompt)
        save_markdown(summary)
        return summary

    chapters = split_into_chapters(pdf_text)

    full_summary = "# üöÄ –ö–æ–Ω—Å–ø–µ–∫—Ç –∫–Ω–∏–≥–∏\n\n"

    for i, chapter_text in enumerate(chapters):
        chapter_prompt = SYSTEM_PROMPT + f"\n\nüìñ **–ì–ª–∞–≤–∞ {i + 1}**:\n" + chapter_text
        chapter_summary = jupiter.ask_jupiter(chapter_prompt)
        full_summary += f"## –ì–ª–∞–≤–∞ {i + 1}\n\n{chapter_summary}\n\n"

    save_markdown(full_summary)
    return full_summary


def process_local_file(url):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, PDF)."""
    local_path = url[7:] if url.lower().startswith("file://") else url

    if local_path.startswith("/"):
        local_path = local_path[1:]

    local_path = unquote(local_path)

    _, ext = os.path.splitext(local_path)
    ext = ext.lower()
    print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {local_path} (—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext})")

    if ext == ".pdf":
        return summarize_pdf(local_path)
    else:
        print(f"‚ö† –ö–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {ext} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
        summary = f"–ó–∞–≥–ª—É—à–∫–∞: –∫–æ–Ω—Å–ø–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ {ext} –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ."
        save_markdown(summary)
        return summary


def run_consenting():
    """
    –ü–æ–ª—É—á–∞–µ—Ç URL –∏–∑ —Ñ–∞–π–ª–∞.
    –ï—Å–ª–∏ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª (file://...), –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞.
    –ò–Ω–∞—á–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∫ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É.
    """
    url = get_active_url()
    if url:
        if url.lower().startswith("file://"):
            print(f"‚ö† –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {url}")
            process_local_file(url)
        else:
            page_content = fetch_page_content(url)
            if page_content:
                combined_prompt = SYSTEM_PROMPT + "\n\n" + page_content
                summary = jupiter.ask_jupiter(combined_prompt)
                save_markdown(summary)
                os.system("start debug.md")



def get_active_window_title():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–∫–Ω–∞."""
    hwnd = win32gui.GetForegroundWindow()
    return win32gui.GetWindowText(hwnd)





def main():
    run_consenting()


if __name__ == '__main__':
    main()
